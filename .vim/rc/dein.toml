# dein
[[plugins]]
repo = 'Shougo/dein.vim'

# time
[[plugins]]
repo = 'wakatime/vim-wakatime'

# color
[[plugins]]
repo = 'rhysd/try-colorscheme.vim'

[[plugins]]
repo = "cocopon/iceberg.vim"
hook_add = '''
    colorscheme iceberg
'''
 
# surround
[[plugins]]
repo = 'tpope/vim-surround'

# jautil
[[plugins]]
repo = 'thinca/vim-jautil'

# pomodoro
[[plugins]]
repo = '0Delta/vimodoro'

# vimdoc-ja
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <C-t> :NERDTreeToggle<CR>
    let NERDTreeIgnore = ['\.pyc$','\.swp$','\.meta$']
'''

# clever-f
# [[plugins]]
# repo = 'rhysd/clever-f.vim'

# easymotion
[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    let g:EasyMotion_do_mapping = 0 "Disable default mappings
    map f <Plug>(easymotion-fl)
    map t <Plug>(easymotion-tl)
    map F <Plug>(easymotion-s2)
    map T <Plug>(easymotion-Tl)
    " noremap f <Plug>(easymotion-s2)
    " noremap F <Plug>(easymotion-s2)
'''

# Vimペインのサイズ連続切り替えを可能にする
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
    call submode#enter_with('bufmove', 'n', '', 'sL', '<C-w>>')
    call submode#enter_with('bufmove', 'n', '', 'sH', '<C-w><')
    call submode#enter_with('bufmove', 'n', '', 'sJ', '<C-w>+')
    call submode#enter_with('bufmove', 'n', '', 'sK', '<C-w>-')
    call submode#map('bufmove', 'n', '', 'L', '<C-w>>')
    call submode#map('bufmove', 'n', '', 'H', '<C-w><')
    call submode#map('bufmove', 'n', '', 'J', '<C-w>+')
    call submode#map('bufmove', 'n', '', 'K', '<C-w>-')
'''

# ???
# [[plugins]]
# repo = 'Shougo/neco-vim'
# [[plugins]]
# repo = 'Shougo/neco-syntax'

# Migemo
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif

  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'

[[plugins]]
repo = 'haya14busa/incsearch-migemo.vim'
[[plugins]]
repo = 'haya14busa/vim-migemo'
hook_add = '''
map m/ <Plug>(incsearch-migemo-/)
map m? <Plug>(incsearch-migemo-?)
map mg/ <Plug>(incsearch-migemo-stay)

"    let alphabets = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
"    for k in alphabets
"        execute "map /".k." <Plug>(incsearch-migemo-/)".k
"        execute "map ?".k." <Plug>(incsearch-migemo-?)".k
"        execute "map g/".k." <Plug>(incsearch-migemo-stay)".k
"    endfor
"    let alphabetsu = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
"    for k in alphabetsu
"        execute "map /".k." <Plug>(incsearch-forward)".k
"        execute "map ?".k." <Plug>(incsearch-backward)".k
"        execute "map g/".k." <Plug>(incsearch-stay)".k
"    endfor
"    map / <Nop>
"    map ? <Nop>
"    map g/ <Nop>
"    set ignorecase
'''

# LSP - 補完サーバ
[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
# hook_add='''
#     augroup MyLsp
#         autocmd!
#         let g:lsp_diagnostics_enabled = 1
#         " debug
#         let g:lsp_log_verbose = 1
#         let g:lsp_log_file = expand('~/vim-lsp.log')
#         let g:asyncomplete_log_file = expand('~/asyncomplete.log')
# 
#         if executable('pyls')
#             au User lsp_setup call lsp#register_server({
#                 \ 'name': 'pyls',
#                 \ 'cmd': {server_info->['pyls']},
#                 \ 'whitelist': ['python'],
#                 \ })
#             au FileType python call s:configure_lsp()
#         endif
# 
#         if executable('gopls')
#             autocmd User lsp_setup call lsp#register_server({
#                 \ 'name': 'go-lang',
#                 \ 'cmd': {server_info->['gopls']},
#                 \ 'whitelist': ['go'],
#                 \ })
#             au FileType go call s:configure_lsp()
#         endif
# 
#         function! s:configure_lsp() abort
#             setlocal omnifunc=lsp#complete   " オムニ補完を有効化
#             " LSP用にマッピング
#             nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
#             nnoremap <buffer> gd :<C-u>LspDefinition<CR>
#             nnoremap <buffer> gD :<C-u>LspReferences<CR>
#             nnoremap <buffer> gs :<C-u>LspDocumentSymbol<CR>
#             nnoremap <buffer> gS :<C-u>LspWorkspaceSymbol<CR>
#             nnoremap <buffer> gQ :<C-u>LspDocumentFormat<CR>
#             vnoremap <buffer> gQ :LspDocumentRangeFormat<CR>
#             " nnoremap <buffer> K :<C-u>LspHover<CR>
#             nnoremap <buffer> <F1> :<C-u>LspImplementation<CR>
#             nnoremap <buffer> <F2> :<C-u>LspRename<CR>
# 
#             nnoremap <buffer> <C-j> :<C-u>LspNextError<CR>
#             nnoremap <buffer> <C-k> :<C-u>LspPreviousError<CR>
#         endfunction
#     augroup END
# '''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
    if empty(globpath(&rtp, 'autoload/lsp.vim'))
      finish
    endif
    
    function! s:on_lsp_buffer_enabled() abort
      setlocal omnifunc=lsp#complete
      setlocal signcolumn=yes
      nmap <buffer> gd <plug>(lsp-definition)
      nmap <buffer> <f2> <plug>(lsp-rename)
      inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
    endfunction
    
    augroup lsp_install
      au!
      autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END
    command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')
    
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    let g:asyncomplete_auto_popup = 1
    let g:asyncomplete_auto_completeopt = 0
    let g:asyncomplete_popup_delay = 500
    let g:lsp_text_edit_enabled = 1
'''

[[plugins]]
repo = 'mattn/vim-lsp-icons'
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

# decomplete - 補完
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add='''
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif
  let g:deoplete#enable_at_startup = 1
'''

# # tabnine
# [[plugins]]
# repo = 'tbodt/deoplete-tabnine'
# hook_post_update = '''
#   if has('win32') || has('win64')
#     let cmd = 'powershell.exe .\install.ps1''
#   else
#     let cmd = './install.sh'
#   endif
#   let g:dein#plugin.build = cmd
# '''
# hook_add = '''
#   if &ft!~'^\(go\|python\|conf\|vim\|ruby\|java\|js\|c\|cpp\|cs\)$'
#     set rtp+=~/.vim/plugins/repos/github.com/tbodt/deoplete-tabnine
#   endif
# '''

# foldCC - foldの見た目変更
[[plugins]]
repo = 'LeafCage/foldCC.vim'
hook_add = '''
    set foldtext=FoldCCtext()
"    let g:foldCCtext_head = ''
"    let g:foldCCtext_tail = 'v:foldend-v:foldstart+1'
    let g:foldCCtext_head = '""'
    let g:foldCCtext_tail = '"-[" . printf("%5d",(v:foldend-v:foldstart+1)) . " lines   Lv." . v:foldlevel . "]- "'
'''

# skk
[[plugins]]
repo = 'tyru/eskk.vim'
hook_add = '''
    set imdisable
    let g:eskk#directory = "~/.eskk"
    let g:eskk#dictionary = { 'path': "~/.skk-dic/user", 'sorted': 0, 'encoding': 'utf-8', }
    "" let g:eskk#dictionary = { 'path': "~/.skk-dic/userdict.txt", 'sorted': 0, 'encoding': 'utf-16le', }
    let g:eskk#large_dictionary = { 'path': "~/.skk-dic/SKK-JISYO.L", 'sorted': 1, 'encoding': 'euc-jp', }
    let g:eskk#show_candidates_count = 1
    " set statusline+=\[%{eskk#get_mode()}\]

	augroup eskk
	  autocmd!
	  autocmd eskk VimEnter * imap <C-j> <Plug>(eskk:toggle)
	  autocmd eskk VimEnter * cmap <C-j> <Plug>(eskk:toggle)
	augroup END
'''

# vimdoc-jp
[[plugins]]
repo = 'vim-jp/autofmt'
hook_add = '''
    :set formatexpr=autofmt#japanese#formatexpr()
'''

# game
[[plugins]]
repo = 'deris/vim-duzzle'
